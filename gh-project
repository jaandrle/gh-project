#!/usr/bin/env bash
set -e
(! type -p bash >/dev/null) && echo "Bash not found on the system" >&2 && exit 1
(! type -p jq >/dev/null) && echo "JQ not found on the system" >&2 && exit 1
this_dir="`dirname "$0"`/"
this_version="2022-02-01"
num_project=${1:-list}
[[ "--help" = "$num_project" ]] && source $this_dir'help/main.sh'
jqChoose(){ echo "$1" | jq -r "$2"; }

list_projects=`gh api "/repos/{owner}/{repo}/projects" -q "[ .[] | { id, number, name, body, html_url } ]"`
if [[ "list" = "$num_project" ]]; then
    echo -e "NUM\tNAME\t\tDESCRIPTION"
    jqChoose "$list_projects" '.[] | [ .number, ( .name + "\t" ), .body ] | join("\t")'
    exit 0
fi

source $this_dir'utils/testNumber.sh'

testNumber "project" $num_project
shift
if [[ "$*" =~ "--web" ]]; then
    exo-open --launch WebBrowser "`echo "$list_projects" | jq -r ". | map(select(.number == $num_project)) | .[0].html_url"`?fullscreen=true" 2> /dev/null
    exit "$?"
fi

num_column=${1:-list}
[[ "--help" = "$num_column" ]] && source $this_dir'help/sub_project.sh'

__project=`echo "$list_projects" | jq ". | map(select(.number == $num_project)) | .[0]"`
id_project=`jqChoose "$__project" '.id'`
name_project="Project '`jqChoose "$__project" '.name'`'"
list_columns=`gh api "projects/$id_project/columns" -q '. as $arr | reduce range(0;length) as $i ([]; . + [ $arr[$i] | { id, name, "number": $i } ])'`
if [[ "list" = "$num_column" ]]; then
    echo -e "$name_project\n\nNUM\tNAME"
    jqChoose "$list_columns" '.[] | [ .number, .name ] | join("\t")'
    exit 0
fi

testNumber "column" $num_column
shift
num_card=${1:-list}
[[ "--help" = "$num_card" ]] && source $this_dir'help/sub_column.sh'

__column=`echo "$list_columns" | jq ". | map(select(.number == $num_column)) | .[0]"`
id_column=`jqChoose "$__column" '.id'`
name_column="$name_project → Column '`jqChoose "$__column" '.name'`'"
source $this_dir'utils/listCards.sh'
list_cards=`listCards $id_column`
source $this_dir'utils/printColumn.sh'
[[ "list" = "$num_card" ]] && printColumn "$name_column" "$list_cards" && exit 0

testNumber "card" $num_card
shift
cmd=${1:---help}
[[ "--help" = "$cmd" ]] && source $this_dir'help/sub_card.sh'
shift
id_card=`echo "$list_cards" | jq ". | map(select(.number == $num_card)) | .[0].id"`
if [[ "$cmd" = "above" ]] || [[ "$cmd" = "below" ]]; then
    if [[ "${1:-}" != "" ]]; then
        testNumber "position inside column" $1
        [[ "$cmd" = "above" ]] \
            && id_target=`echo "$list_cards" | jq ". | map(select(.number == $1 - 1)) | .[0].id"` \
            || id_target=`echo "$list_cards" | jq ". | map(select(.number == $1)) | .[0].id"`
        exec gh api "/projects/columns/cards/$id_card/moves" -f "position=after:$id_target" > /dev/null
    fi
    [[ "$cmd" = "above" ]] \
        && position="top" \
        || position="bottom"
    exec gh api "/projects/columns/cards/$id_card/moves" -f "position=$position" > /dev/null
fi

if [[ "view" == "$cmd" ]]; then
    issue=`echo "$list_cards" | jq -r ". | map(select(.number == $num_card)) | .[0].issue"`
    if [[ "$issue" != "null" ]]; then
        exec gh issue view $issue -c
        exit 0
    fi
    echo -e "`echo "$list_cards" | jq -r ". | map(select(.number == $num_card)) | .[0].note"`"
    exit 0
fi

if [[ "column" != "$cmd" ]]; then
    echo "Wrong argument '$cmd'"
    echo "Use '--help' for help"
    exit 1
fi

if [[ "${1:-}" == "" ]]; then
    echo "$name_column"
    echo -e "Columns:\n\t`echo "$list_columns" | jq -r '[ .[] | [ .number, .name ] | join(": ") ] | join("\n\t")'`"
    echo ""
    read -p "Enter target column number: " num_column_target
else
    num_column_target=$1
    shift
fi
testNumber "target column" $num_column_target
__column=`echo "$list_columns" | jq ". | map(select(.number == $num_column_target)) | .[0]"`
id_column_target=`jqChoose "$__column" '.id'`
name_column_target="$name_project → Column '`jqChoose "$__column" '.name'`'"
gh api "/projects/columns/cards/$id_card/moves" -f "position=top" -F "column_id=$id_column_target" > /dev/null \
    && printColumn "$name_column_target" "`listCards $id_column_target`"
exit "$?"
